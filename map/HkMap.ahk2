#Requires AutoHotkey v2.0-

; #Include %A_ScriptDir%\..\lib\Script.ahk2
; #Include %A_ScriptDir%\..\lib\Form.ahk2

class HkMap {
    static Delimiter => ";"
    static TEXT_BOX_OPTIONS => "r20 w500 Multi ReadOnly"
    
    static __table := ""
    
    __New() {
        if (not HkMap.__table)
            HkMap.__table := ComObject("Scripting.Dictionary")
    }
    
    CallThisKey() {
        return this.Call(Trim(Script.GetHotkeyName(A_ThisHotkey), HkMap.Delimiter))
    }
    
    CallThisKey_NoDelim() {
        return this.Call(Script.GetHotkeyName(A_ThisHotkey))
    }
    
    Call(key) {
        return HkMap.__table[key][2].Call()
    }
	
	CallWithoutHk(key) {
		prev := Script.CheckHotkeyName
		Script.SetHotkeyNameCheck(false)
		what := this.Call(key)
		Script.SetHotkeyNameCheck(prev)
		return what
	}
    
    static __GetKey(myForm) {
        if (myForm.HasFocus()) {
            lv := myForm.Gui["List"]
            rowNumber := lv.GetNext()
            
            if (rowNumber > 0)
                return lv.GetText(rowNumber, 1)
        }
    }
	
    static __GetDescription(myForm) {
        if (myForm.HasFocus()) {
            lv := myForm.Gui["List"]
            rowNumber := lv.GetNext()
            
            if (rowNumber > 0)
				return lv.GetText(rowNumber, 1)
					. " - "
					. lv.GetText(rowNumber, 2)
        }
    }
	
    RunListViewForm() {
        myForm := Form()
        myForm.Gui.Title := "Hotstrings for " A_ScriptName
        
        lv := myForm.Gui.Add(
            "ListView",
            HkMap.TEXT_BOX_OPTIONS " " Form.CtrlColors " vList",
            ["Hotstring", "Description"]
        )
        
        for (key in HkMap.__table.Keys)
            lv.Add(, key, RegExReplace(HkMap.__table[key][1], "^Hotstring: "))
            
        lv.ModifyCol
        lv.OnEvent("DoubleClick", (*) => this.CallWithoutHk(HkMap.__GetKey(myForm)))
        
        cancel_button := myForm.Gui.Add("Button", "w100 x+m yp", "Ca&ncel")
        hidden_button := myForm.Gui.Add("Button", "w0 h0 Hidden Default")
        
        cancel_button.OnEvent("Click", (*) => myForm.Cancel())
        hidden_button.OnEvent("Click", (*) => this.CallWithoutHk(HkMap.__GetKey(myForm)))
		
        myForm.MapKey("~^c", (*) => (
			myForm.HasFocus() and A_Clipboard := HkMap.__GetDescription(myForm)
		))
        
        myForm.Gui.OnEvent("Close", (*) => myForm.Cancel())
        myForm.Gui.OnEvent("Escape", (*) => myForm.Cancel())
        myForm.Gui.Show()
        myForm.Wait()
    }
    
    Show(command, key) {
        command := StrUpper(command)
        
        if (command = "HELP") {
            MsgBox(HkMap.__table[key][1])
        } else if (command = "LIST") {
            this.RunListViewForm()
        }
    }
    
    Main(add_table_func) {
        add_table_func.Call(HkMap.__table)
        
        if (A_Args.Length > 0) {
            command := StrUpper(A_Args[1])
            
            if (command = "LIST") {
                this.__RunListViewForm()
            } else if (command = "HELP") {
                MsgBox(HkMap.__table[A_Args[2]][1])
            } else if (command = "RUN") {
                this.Call(A_Args[2])
            }
            
            Script.Exit()
        }
    }
}
