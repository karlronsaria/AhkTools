#Requires AutoHotkey v2.0-

; #Include %A_ScriptDir%\..\lib\Script.ahk2
; #Include %A_ScriptDir%\..\lib\Calendar.ahk2
; #Include %A_ScriptDir%\..\lib\Command.ahk2
; #Include %A_ScriptDir%\..\lib\Date.ahk2
; #Include %A_ScriptDir%\..\lib\Form.ahk2
; #Include %A_ScriptDir%\..\lib\History.ahk2
; #Include %A_ScriptDir%\..\lib\LineReader.ahk2
; #Include %A_ScriptDir%\..\lib\Progress.ahk2
; #Include %A_ScriptDir%\..\lib\RunBox.ahk2
; #Include %A_ScriptDir%\..\lib\String.ahk2
; #Include %A_ScriptDir%\..\lib\SwapBox.ahk2
; #Include %A_ScriptDir%\..\lib\TitleForm.ahk2
; #Include %A_ScriptDir%\..\map\FindWindow.ahk2
; #Include %A_ScriptDir%\..\map\HkMap.ahk2

;;;;;;;;;;;;;;;;;;;
; --- Hotkeys --- ;
;;;;;;;;;;;;;;;;;;;

; Source:
;    https://superuser.com/questions/442960/windows-7-explorer-keyboard-shortcut-set-focus-to-files-folders-content-area
;    https://superuser.com/users/100787/iglvzx
;    
; Retrieved:
;    2020_06_24

#Space::
{
    if (WinActive("ahk_class CabinetWClass")) {  ; Windows Explorer
        ControlFocus("DirectUIHWND3", "A")
        SendInput("{Space}")
    }
}

; ; DISABLED: 2020_06_24
; 
; ; Hotkey: Oh this? Just a little, *experiment*.
; >!RCtrl::AppsKey
; >^RAlt::AppsKey

class HotstringHk extends HkMap {
    static SECND_SEPARATOR => "_-_"  ; "_"
    static TAB_SIZE => 4
    static NOTE_WIDTH => 69 ; 85

    ; As of 2020_03_28
    static BROWSER_PROCESS_NAMES => [
        "chrome.exe"
      , "firefox.exe"
      , "MicrosoftEdge.exe"
      , "iexplore.exe"
      , "brave.exe"
    ]

    static DAY_NAMES => [
        {short: "Sun", long: "Sunday"}
      , {short: "Mon", long: "Monday"}
      , {short: "Tue", long: "Tuesday" }
      , {short: "Wed", long: "Wednesday" }
      , {short: "Thu", long: "Thursday" }
      , {short: "Fri", long: "Friday" }
      , {short: "Sat", long: "Saturday" }
    ]

    static ExplorerPreviewPane() {
        if (WinActive("ahk_class CabinetWClass")) {  ; Windows Explorer
            SendNotification("Deprecated - 2020_07_02", "Use Alt + P")
            Commands.TogglePaneInExplorer("p")
        }
    }

    static ExplorerDetailsPane() {
        if (WinActive("ahk_class CabinetWClass")) { ; Windows Explorer
            SendNotification("Deprecated - 2020_07_02", "Use Alt + Shft + P")
            Commands.TogglePaneInExplorer("d")
        }
    }

    static ExplorerLatestDatedItem() {
        if (WinActive("ahk_class CabinetWClass")) { ; Windows Explorer
            A_Clipboard := "<INVALID_FILENAME>"

            decision := true
            previous := Script.__notify_clip

            if (IsBoolean(decision)) {
                OnClipboardChange("NotifyWhenClipboardChanges", decision)
                Script.__notify_clip := decision
            }

            ; previous := Script.SetNotifyClipboardEvents(true)
            Script.Lock()

            Commands.GetLatestDatedItemNameInExplorerWindow()

            decision := previous
            previous := Script.__notify_clip

            if (IsBoolean(decision)) {
                OnClipboardChange("NotifyWhenClipboardChanges", decision)
                Script.__notify_clip := decision
            }

            ; Script.SetNotifyClipboardEvents(previous)
        }
    }

    static KillProcesses() {
        processes := [ Script.CurrentProcess ]
        Commands.KillAll(
            processes,
            A_ScriptName,
            Commands.GetKillAllMessage(processes)
        )
    }

    static RepeatSend(code, presses) {
        count := 1

        while (count <= presses) {
            SendInput(code)
            count := count + 1
        }
    }

    static ReadAndRepeatSend(code := "") {
        Sleep(200)

        if (!code) {
            code := InputBox("Enter a key code.", "A Title", "w160 h100").Value
        }

        presses := InputBox("How many presses?", "A Title", "w160 h100").Value

        if (code and presses) {
            HotstringHk.RepeatSend(code, presses)
        }
    }

    static AddTable(&table) {
        table["kill"] := [
            "Terminate the current process",
            () => HotstringHk.KillProcesses()
        ]

        table["reload"] := [
            "Reload the current process",
            () => [
                TrayTip("Reloading...", A_ScriptName),
                Script.Reload()
            ]
        ]

        table["panic"] := [
            "Kill all Web browser applications",
            () => Commands.KillAll(HotstringHk.BROWSER_PROCESS_NAMES)
        ]

        table["ppane"] := table["preview"] := [
            "Toggle Preview Pane in Windows Explorer",
            () => HotstringHk.ExplorerPreviewPane()
        ]

        table["dpane"] := table["details"] := [
            "Toggle Details Pane in Windows Explorer",
            () => HotstringHk.ExplorerDetailsPane()
        ]

        table["repeat"] := [
            "Open an input box, allowing the user to request a keystroke to "
            "repeat a number of times",
            () => HotstringHk.ReadAndRepeatSend()
        ]

        table["goright"] := [
            "Open an input box, allowing the user to request a number of times "
            "to send {Right}",
            () => HotstringHk.ReadAndRepeatSend("{Right}")
        ]

        table["goleft"] := [
            "Open an input box, allowing the user to request a number of times "
            "to send {Left}",
            () => HotstringHk.ReadAndRepeatSend("{Left}")
        ]

        table["calendar"] := [
            "Open a date-select calendar, allowing the user to choose a date "
            "with which to replace this hotstring",
            () => Calendar.Run(true)
        ]

        table["formats"] := [
            "Open a list of title formats, allowing the user to choose one "
            "with which to replace this hotstring",
            () => TitleForm.Run(true)
        ]

        table["swap"] := [
            "Open an input box to perform a string swap on the clipboard",
            () => SwapBox.Run(true)
        ]

        table["ahk"] := [
            "Open an input box to show the output of an AutoHotkey command",
            () => RunBox.Run(true)
        ]

        table["winf"] := [
            "Open an input box to search for an open window by title",
            () => FindWindow.Form.Run(true)
        ]

        table["list"] := [
            "List all hotstrings",
            () => HotstringHk().RunListViewForm()
        ]

        table["listhk"] := [
            "List all hotkeys",
            () => Commands.ListHotkeys(not A_ThisHotkey)
        ]

        table["listvar"] := [
            "List all variables",
            () => Commands.ListVariables(not A_ThisHotkey)
        ]

        table["listline"] := [
            "List all most-recently executed lines",
            () => Commands.ListLines(not A_ThisHotkey)
        ]

        table["listkey"] := [
            "List most recent key strokes",
            () => Commands.ListKeyHistory(not A_ThisHotkey)
        ]

        table["titlecase"] := table["t"] := [
            "Replace with the title-case version of the clipboard string",
            () => Script.Send(Strings.ToTitleCase(A_Clipboard))
        ]

        table["randomcase"] := [
            "Replace with the random-case version of the clipboard string",
            () => Script.Send(Strings.ToRandomCase(A_Clipboard))
        ]

        table["iowercase"] := [
            "Replace all lower L's with upper I's in the clipboard string`r`n"
            "   Link: https://www.youtube.com/watch?v=E3p_Crhi3K8",
            () => [
                str := Strings.EscapeModifiers(A_Clipboard),
                str := StrReplace(str, "l", "I")
            ] && Script.Send(str)
        ]

        table["iolocase"] := [
            "Swap all lower L's with upper I's in the clipboard string`r`n"
            "   Link: https://www.youtube.com/watch?v=E3p_Crhi3K8",
            () => [
                str := Strings.EscapeModifiers(A_Clipboard),
                str := Strings.StrSwap(str, "l", "I")
            ] && Script.Send(str)
        ]

        table["tounix"] := [
            "Replace backslashes with slashes",
            () => Script.Send(Strings.ToUnixString(A_Clipboard))
        ]

        table["todos"] := [
            "Replace slashes with backslashes",
            () => Script.Send(Strings.ToDosString(A_Clipboard))
        ]

        table["tojson"] := [
            "Replace backslashes with double-backslashes",
            () => Script.Send(Strings.ToJsonString(A_Clipboard))
        ]

        table["tab2space"] := [
            "Replace all tabs with spaces on the clipboard",
            () => Script.Send(Strings.ReplaceTabsShowingProgress(A_Clipboard, A_Space))
        ]

        table["leadtab4"] := [
            "Replace all leading groups of 4 spaces with tabs on the "
            "clipboard",
            () => Script.Send(Strings.ReplaceLeadingSpacesWithTabs(A_Clipboard, 4))
        ]

        table["leadtab8"] := [
            "Replace all leading groups of 8 spaces with tabs on the "
            "clipboard",
            () => Script.Send(Strings.ReplaceLeadingSpacesWithTabs(A_Clipboard, 8))
        ]

        table["snake"] := [
            "Replace all tabs with underscores on the clipboard",
            () => Script.Send(Strings.ReplaceTabsAndSpacesShowingProgress(A_Clipboard, "_"))
        ]

        table["pyval"] := [
            "Replace with a python evaluation of the content on the "
            "clipboard `r`n`r`nImports: `r`n`r`n" Strings.PyvalImports,
            () => Script.Send(Strings.PythonEvaluateClipboard())
        ]

        table["block"] := [
            "Add word-wrapped line breaks to text on the clipboard;`r`n"
            "(default tab size is 4)",
            () => Script.Send(Strings.PasteBlockText(A_Clipboard, HotstringHk.TAB_SIZE, HotstringHk.NOTE_WIDTH))
        ]

        table["block_tab4"] := [
            "Add word-wrapped line breaks to text on the clipboard;`r`n"
            "(make sure the tab size is 4)",
            () => Script.Send(Strings.PasteBlockText(A_Clipboard, 4, HotstringHk.NOTE_WIDTH))
        ]

        table["block_tab8"] := [
            "Add word-wrapped line breaks to text on the clipboard;`r`n"
            "(make sure the tab size is 8)",
            () => Script.Send(Strings.PasteBlockText(A_Clipboard, 8, HotstringHk.NOTE_WIDTH))
        ]

        table["condense"] := [
            "Combine consecutive lines of content to a single line "
            "on the clipboard;`r`n(default tab size is 4)",
            () => Script.Send(Strings.PasteCondensedBlockText(A_Clipboard, HotstringHk.TAB_SIZE, HotstringHk.NOTE_WIDTH))
        ]

        table["condense_tab4"] := [
            "Combine consecutive lines of content to a single line "
            "on the clipboard;`r`n(make sure the tab size is 4)",
            () => Script.Send(Strings.PasteCondensedBlockText(A_Clipboard, 4, HotstringHk.NOTE_WIDTH))
        ]

        table["condense_tab8"] := [
            "Combine consecutive lines of content to a single line "
            "on the clipboard;`r`n(make sure the tab size is 8)",
            () => Script.Send(Strings.PasteCondensedBlockText(A_Clipboard, 8, HotstringHk.NOTE_WIDTH))
        ]

        table["last"] := [
            "Copy to clipboard the latest datetime string occurring "
            "in the currently active explorer window",
            () => HotstringHk.ExplorerLatestDatedItem()
        ]

        table["top"] := [
            "Replace with the device ID of the last local fixed disk drive",
            () => Script.Send(Commands.GetLogicalDiskId(3, 0))
        ]

        table["rem"] := [
            "Replace with the device ID of the first removable disk drive",
            () => Script.Send(Commands.GetLogicalDiskId(2, 1))
        ]

        table["date"] := [
            "Replace with current date "
            "in standard `"" Dates.DateFormat "`" format",
            () => Script.Send(Dates.GetStdDate())
        ]

        table["prettydate"] := [
            "Replace with current date "
            "in pretty `"" Dates.DatePrettyFormat "`" format",
            () => Script.Send(Dates.GetPrettyDate())
        ]

        table["time"] := [
            "Replace with current time",
            () => Script.Send(Dates.GetStdTime())
        ]

        table["prettytime"] := [
            "Replace with current time "
            "in pretty `"" Dates.TimePrettyFormat "`" format",
            () => Script.Send(Dates.GetPrettyTime())
        ]

        table["datetime"] := [
            "Replace with current date and time",
            () => Script.Send(Dates.GetDateAndTime())
        ]

        table["title"] := [
            "Replace with a title-corrected string from the Clipboard",
            () => Script.Send(
                Strings.GetSubtitle(
                    A_Clipboard,
                    HotstringHk.SECND_SEPARATOR
                )
            )
        ]

        table["d_title"] := [
            "Replace with current date and title string",
            () => Script.Send(
                Strings.GetTitle(
                    Dates.GetStdDate(),
                    A_Clipboard,
                    "_",
                    HotstringHk.SECND_SEPARATOR
                )
            )
        ]

        table["dt_title"] := [
            "Replace with current date and time and title string",
            () => Script.Send(
                Strings.GetTitle(
                    Dates.GetDateAndTime(),
                    A_Clipboard,
                    "_",
                    HotstringHk.SECND_SEPARATOR
                )
            )
        ]

        table["d_-_title"] := [
            "Replace with current date and title string",
            () => Script.Send(
                Strings.GetTitle(
                    Dates.GetStdDate(),
                    A_Clipboard,
                    "_-_",
                    HotstringHk.SECND_SEPARATOR
                )
            )
        ]

        table["dt_-_title"] := [
            "Replace with current date and time and title string",
            () => Script.Send(
                Strings.GetTitle(
                    Dates.GetDateAndTime(),
                    A_Clipboard,
                    "_-_",
                    HotstringHk.SECND_SEPARATOR
                )
            )
        ]

        for (index, value in HotstringHk.DAY_NAMES) {

            table["last" value.short] := table["l" value.short] := [
                "Replace with last " value.long "'s date",
                ((i) => Dates.GetLastDate(i)).Bind(index)
            ]

            table["next" value.short] := table["n" value.short] := [
                "Replace with next " value.long "'s date",
                ((i) => Dates.GetNextDate(i)).Bind(index)
            ]
        }
    }
}

HotstringHk().Main((t) => HotstringHk.AddTable(&t))

:?:;stop;::
:?:;start;::
:?:;kill;::
:?:;reload;::
:?:;panic;::
:*b0?:;ppane;::
:*b0?:;preview;::
:*b0?:;dpane;::
:*b0?:;details;::
:?:;repeat;::
:?:;goright;::
:?:;goleft;::
:?:;calendar;::
:?:;formats;::
:?:;swap;::
:?:;ahk;::
:?:;winf;::
:?:;list;::
:?:;listhk;::
:?:;listvar;::
:?:;listline;::
:?:;listkey;::
:*?:;t;::
:*?:;titlecase;::
:*?:;randomcase;::
:*?:;iowercase;::
:*?:;iolocase;::
:*?:;tounix;::
:*?:;todos;::
:*?:;tojson;::
:*?:;tab2space;::
:*?:;leadtab4;::
:*?:;leadtab8;::
:*?:;snake;::
:*?:;pyval;::
:*?:;block;::
:*?:;block_tab4;::
:*?:;block_tab8;::
:*?:;condense;::
:*?:;condense_tab4;::
:*?:;condense_tab8;::
:*b0?:;last;::
:*?:;top;::
:*?:;rem;::
:*?:;date;::
:*?:;prettydate;::
:*?:;time;::
:*?:;prettytime;::
:*?:;datetime;::
:*?:;title;::
:*?:;d_title;::
:*?:;dt_title;::
:*?:;d_-_title;::
:*?:;dt_-_title;::
:*?:;lastSun;::
:*?:;lSun;::
:*?:;lastMon;::
:*?:;lMon;::
:*?:;lastTue;::
:*?:;lTue;::
:*?:;lastWed;::
:*?:;lWed;::
:*?:;lastThu;::
:*?:;lThu;::
:*?:;lastFri;::
:*?:;lFri;::
:*?:;lastSat;::
:*?:;lSat;::
:*?:;nextSun;::
:*?:;nSun;::
:*?:;nextMon;::
:*?:;nMon;::
:*?:;nextTue;::
:*?:;nTue;::
:*?:;nextWed;::
:*?:;nWed;::
:*?:;nextThu;::
:*?:;nThu;::
:*?:;nextFri;::
:*?:;nFri;::
:*?:;nextSat;::
:*?:;nSat;::
{
    HotstringHk().CallThisKey()
}
