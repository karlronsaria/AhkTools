#Requires AutoHotkey v2.0-

class Commands {
    static TogglePaneInExplorer(letter) {
        if WinActive("ahk_class CabinetWClass")
            SendInput("!v" letter)
    }
    
    ; http://www.autohotkey.com/board/topic/121208-windows-explorer-get-folder-path/
    static Explorer_GetSelection(hwnd := "") {
        hwnd := hwnd ? hwnd : WinExist("A")
        process := WinGetProcessName("ahk_id " hwnd)
        objclass := WinGetClass("ahk_id " hwnd)
        process := StrLower(process)
        output := ""
        
        if process = "explorer.exe" {
            if objclass ~= "Progman|WorkerW" {
                files := ControlGetItems("Selected Col1", "SysListView321", "ahk_class " objclass)
                
                loop Parse, files, "`n", "`r"
                    output .= A_Desktop "\" A_LoopField "`n"
            } else if objclass ~= "(Cabinet|Explore)WClass" {
                for window in ComObject("Shell.Application").Windows
                    if window.hwnd = hwnd
                        sel := window.Document.SelectedItems
                        
                for item in sel
                    output .= item.path "`n"
            }
        }
        
        return Trim(output, "`n")
    }
    
    ; http://www.autohotkey.com/board/topic/121208-windows-explorer-get-folder-path/
    static GetItemNamesFromCurrentExplorerWindow(hwnd := "") {
        hwnd := hwnd ? hwnd : WinExist("A")
        process := WinGetProcessName("ahk_id " hwnd)
        objclass := WinGetClass("ahk_id " hwnd)
        process := StrLower(process)
        
        if process = "explorer.exe" and objclass ~= "(Cabinet|Explore)WClass"
            for window in ComObject("Shell.Application").Windows
                if window.hwnd = hwnd
                    sel := window.Document.Folder.Items
                    
        return sel
    }
    
    static GetLatestDatedItemName(items) {
        for item in items
            if RegExMatch(item.Path, "\d{4}-\d{2}-\d{2}(-\d{6})?(?=[^\\]*$)", &match) ; Uses DateTimeFormat
                return item.Path
                
        return ""
    }
    
    static GetLatestDatedItemNameInExplorerWindow() {
        return Commands.GetLatestDatedItemName(Commands.GetItemNamesFromCurrentExplorerWindow())
    }
    
    static GetLogicalDiskId(drive_type, position) {
    
        ; drive_type
        ; ----------
        ; 2 - Removable
        ; 3 - Local Fixed
        ; 
        ; position
        ; --------
        ; <= 0 - The last drive in the list
        ; >  0 - The drive at this position in the list
        
        top_drive := ""
        query := "Select * FROM Win32_LogicalDisk WHERE DriveType = " . drive_type
        count := 0
        
        for disk in ComObjGet("winmgmts:").ExecQuery(query) {
            top_drive := disk.DeviceID
            count := count + 1
            
            if (count = position)
                return top_drive
        }
        
        return top_drive
    }
    
    static GetBatchMessage(list, singular, plural, singular_predicate, plural_predicate) {
        msg := ""
        
        if list.Length = 1 {
            msg := singular . list[1] . singular_predicate
        } else {
            msg := plural
            
            if list.Length = 2 {
                msg .= list[1] " and " list[2]
            } else {
                key := 1
                
                while key < list.Length {
                    msg .= list[key] ", "
                    key := key + 1
                }
                
                msg .= "and " list[key]
            }
            
            msg .= plural_predicate
        }
        
        return msg
    }
    
    static GetCloseAllMessage(processes) {
        return Commands.GetBatchMessage(processes, "Process: ", "Processes: ", " has been terminated.", " have been terminated.")
        
        ;; OLD VERSION
        ;; -----------
        ;
        ; for key in processes
        ;   msg .= processes[key] ".exe, "
        ;   
        ; if (processes.MaxIndex() > 1) {
        ;   msg := "Processes: " . msg
        ;   msg := RegExReplace(msg, ", $", " have been terminated.")
        ;   msg := RegExReplace(msg, ",(?=[^,]+$)", " and")
        ;   
        ;   if (RegExMatch(msg, ",[^,]+ and [^,]+$") > 0)
        ;       msg := RegExReplace(msg, " and (?=[^,]+$)", ", and ")
        ; } else {
        ;   msg := "Process: " . msg
        ;   msg := RegExReplace(msg, ", $", " has been terminated.")
        ; }
    }
    
    static GetKillAllMessage(processes) {
        msg := "A terminate signal will be sent to the process"
        return Commands.GetBatchMessage(processes, msg . ": ", msg . "es: ", ".", ".")
    }
    
    static GetRunAllScriptsMessage(scripts) {
        return Commands.GetBatchMessage(scripts, "Script: ", "Scripts: ", " is now running.", " are now running.")
    }
    
    static CloseAll(process_names, msgTitle := "", msg := "") {
        if msgTitle != "" and msg != ""
            MsgBox(msg, msgTitle, "0x0 T7")
            
        for key, process_name in process_names
            ProcessClose(process_name)
    }
    
    static KillAll(process_names, msgTitle := "", msg := "") {
        if msgTitle != "" and msg != ""
            MsgBox(msg, msgTitle, "0x0 T7")
            
        for key, process_name in process_names
            Run("taskkill /F /T /IM `"" process_name "`"")
    }
    
    static LoadConfirmationDialog() {
        myForm := Form()
        button01 := myForm.Gui.Add("Button",, "Confirm or Escape to close window")
        buttonHidden := myForm.Gui.Add("Button", "w0 h0 Hidden Default", "Cancel")
        myForm.OnEvent("Escape", (*) => myForm.Gui.Destroy())
        button01.OnEvent("Click", (*) => myForm.Gui.Destroy())
        buttonHidden.OnEvent("Click", (*) => myForm.Gui.Destroy())
        myForm.Gui.Show()
    }
    
    static RunWindowed(function_object, use_confirmation_dialog) {
        if use_confirmation_dialog {
            Script.Block()
            function_object.Call()
            Commands.LoadConfirmationDialog()
        } else {
            function_object.Call()
        }
    }
    
    static ListHotkeys(use_confirmation_dialog) {
        return Commands.RunWindowed(() => ListHotkeys(), use_confirmation_dialog)
    }
    
    static ListVariables(use_confirmation_dialog) {
        return Commands.RunWindowed(() => ListVars(), use_confirmation_dialog)
    }
    
    static ListLines(use_confirmation_dialog) {
        return Commands.RunWindowed(() => ListLines(), use_confirmation_dialog)
    }
    
    static ListKeyHistory(use_confirmation_dialog) {
        return Commands.RunWindowed(() => KeyHistory(), use_confirmation_dialog)
    }
}
